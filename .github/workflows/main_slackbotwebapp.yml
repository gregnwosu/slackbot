# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - slackbotwebapp
env:
  AZURE_WEBAPP_NAME: 'slackbotwebapp'    # set this to your application's name
  WORKING_DIRECTORY: '.'        # set this to the path to your path of working directory inside github repository, defaults to the repository root
  PYTHON_VERSION: '3.9'        # set the version to use
  STARTUP_COMMAND: ''
  AZURE_FUNCTIONAPP_NAME: 'slackbotfunctionapp'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
on:
  pull_request:
    branches:
      - main
      - '**'
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  buildandtest:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: python install
        env:

          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          SLACK_BOT_TOKEN: ${{secrets.TF_VAR_SLACK_BOT_TOKEN}}
          SLACK_SIGNING_SECRET: ${{secrets.TF_VAR_SLACK_SIGNING_SECRET}}
          SLACK_BOT_USER_ID: ${{secrets.TF_VAR_SLACK_BOT_USER_ID}}
          SERPAPI_API_KEY: ${{secrets.TF_VAR_SERPAPI_API_KEY}}
          OPENAI_API_KEY: ${{secrets.TF_VAR_OPENAI_API_KEY}}
          AZURE_SUBSCRIPTION_ID: ${{secrets.TF_VAR_AZURE_SUBSCRIPTION_ID}}
          HUGGING_FACE_API_KEY: ${{secrets.HUGGING_FACE_API_KEY}}
          ZAPIER_API_KEY: ${{secrets.ZAPIER_API_KEY}}
          ELEVENLABS_API_KEY: ${{secrets.ELEVENLABS_API_KEY}}
          REDIS_URL: ${{secrets.REDIS_URL}}
          REDIS_KEY: ${{secrets.REDIS_KEY}}
          VAULT_URL: ${{secrets.VAULT_URL}}
          working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
         #sudo apt install python${{ env.PYTHON_VERSION }}-venv
         python -m venv --copies antenv
         source antenv/bin/activate
         pip install setuptools
         pip install -r requirements.txt
         python -m pytest tests --cache-clear --doctest-modules --junitxml=junit/test-results.xml --cov=slackbot --cov-report=xml --cov-report=html
      - name: Zip artifact for deployment
        run: zip release.zip ./* -r
      - name: Upload artifact for deployment jobs

        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: release.zip

  terraform:
    runs-on: ubuntu-latest
    needs: buildandtest
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: python-app
          path: .

      - name: unzip artifact for deployment
        run: unzip release.zip



      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6


      - name: Config Terraform plugin cache
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
          mkdir --parents ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-


      - name: Terraform Init
        id: init
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.TF_CONTAINER_NAME }}

      - name: Terraform format
        if: github.event_name == 'pull_request'
        id: fmt
        run: terraform fmt -check

      - name:  Terraform Validate
        id: validate
        if: github.ref != 'refs/heads/main' && (success() || failure())
        run: terraform validate -no-color

      - name: Checkov
        if: github.event_name == 'pull_request'
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          quiet: true
          framework: terraform
          output_format: github_failed_only
          container_user: 1000
          soft_fail: true
          skip_check: CKV_AZURE_88,CKV_AZURE_71,CKV_AZURE_16

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_SLACK_BOT_TOKEN: ${{secrets.TF_VAR_SLACK_BOT_TOKEN}}
          TF_VAR_SLACK_SIGNING_SECRET: ${{secrets.TF_VAR_SLACK_SIGNING_SECRET}}
          TF_VAR_SLACK_BOT_USER_ID: ${{secrets.TF_VAR_SLACK_BOT_USER_ID}}
          TF_VAR_SERPAPI_API_KEY: ${{secrets.TF_VAR_SERPAPI_API_KEY}}
          TF_VAR_OPENAI_API_KEY: ${{secrets.TF_VAR_OPENAI_API_KEY}}
          TF_VAR_AZURE_SUBSCRIPTION_ID: ${{secrets.TF_VAR_AZURE_SUBSCRIPTION_ID}}
          TF_VAR_HUGGING_FACE_API_KEY: ${{secrets.HUGGING_FACE_API_KEY}}
          TF_VAR_ZAPIER_API_KEY: ${{secrets.ZAPIER_API_KEY}}
          TF_VAR_ELEVENLABS_API_KEY: ${{secrets.ELEVENLABS_API_KEY}}
          TF_VAR_REDIS_URL: ${{secrets.REDIS_URL}}
          TF_VAR_REDIS_KEY: ${{secrets.REDIS_KEY}}
          TF_VAR_VAULT_URL: ${{secrets.VAULT_URL}}
          VAULT_URL: ${{secrets.VAULT_URL}}

      # Add a comment to pull requests with plan results
      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })




      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_SLACK_BOT_TOKEN: ${{secrets.TF_VAR_SLACK_BOT_TOKEN}}
          TF_VAR_SLACK_SIGNING_SECRET: ${{secrets.TF_VAR_SLACK_SIGNING_SECRET}}
          TF_VAR_SLACK_BOT_USER_ID: ${{secrets.TF_VAR_SLACK_BOT_USER_ID}}
          TF_VAR_SERPAPI_API_KEY: ${{secrets.TF_VAR_SERPAPI_API_KEY}}
          TF_VAR_OPENAI_API_KEY: ${{secrets.TF_VAR_OPENAI_API_KEY}}
          TF_VAR_AZURE_SUBSCRIPTION_ID: ${{secrets.TF_VAR_AZURE_SUBSCRIPTION_ID}}
          TF_VAR_HUGGING_FACE_API_KEY: ${{secrets.HUGGING_FACE_API_KEY}}
          TF_VAR_ZAPIER_API_KEY: ${{secrets.ZAPIER_API_KEY}}
          TF_VAR_ELEVENLABS_API_KEY: ${{secrets.ELEVENLABS_API_KEY}}
          TF_VAR_REDIS_URL: ${{secrets.REDIS_URL}}
          TF_VAR_REDIS_KEY: ${{secrets.REDIS_KEY}}
          TF_VAR_VAULT_URL: ${{secrets.VAULT_URL}}
          VAULT_URL: ${{secrets.VAULT_URL}}


  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: python-app
        path: .

    - name: Log in to Azure CLI using service principal
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      id: deploy-to-webapp
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        type: zip
        #clean: true
        #restart: true
        #target-path: /home/site/wwwroot
        package: release.zip
        #startup-command: ${{ env.STARTUP_COMMAND }}
        slot-name: 'Production'
        # todo are we using publish profile?
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_2822AFA1DDBD4A388A20C6EC72438710 }}


    # - name: 'Run Azure Functions Action'
    #   uses: Azure/functions-action@v1
    #   id: deploy-to-functionapp
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   with:
    #     app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
    #     package: release.zip
    #     publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_2822AFA1DDBD4A388A20C6EC72438710 }}
    #     scm-do-build-during-deployment: true
    #     enable-oryx-build: true


